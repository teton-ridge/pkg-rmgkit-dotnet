name: Publish Release NuGet Package

on:
  push:
    branches: [ main ]
    paths:
      - 'RMGKit/**'
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write  # This is needed to push tags
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for version calculation
        token: ${{ secrets.GITHUB_TOKEN }}  # Use the token for checkout
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
        
    - name: Calculate version
      id: calculate-version
      run: |
        # Get the latest tag that matches v*.*.*
        LATEST_TAG=$(git tag -l 'v*.*.*' | sort -V | tail -n 1)
        
        if [ -z "$LATEST_TAG" ]; then
          # No existing version tags, start with 1.0.0
          NEW_VERSION="1.0.0"
        else
          # Remove the 'v' prefix
          LATEST_VERSION=${LATEST_TAG#v}
          
          # Split the version into parts
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
          
          # Increment the patch version
          PATCH=$((PATCH + 1))
          
          # Create the new version
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        fi
        
        echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "Set package version to $NEW_VERSION"
        
        # Create a new tag for this version
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
        
        # Push using the provided token with the correct permissions
        git push https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git --tags
        
    - name: Update project version
      run: |
        sed -i "s|<TargetFramework>net8.0</TargetFramework>|<TargetFramework>net8.0</TargetFramework>\n    <Version>${{ env.VERSION }}</Version>\n    <Authors>TCC</Authors>\n    <Company>TCC</Company>\n    <Description>RMGKit library for TCC applications</Description>\n    <PackageId>TCC.RMGKit</PackageId>|" RMGKit/RMGKit.csproj
        
    - name: Restore dependencies
      run: dotnet restore RMGKit/RMGKit.csproj
      
    - name: Build
      run: dotnet build RMGKit/RMGKit.csproj --configuration Release --no-restore
      
    - name: Pack
      run: dotnet pack RMGKit/RMGKit.csproj --configuration Release --no-build --output nupkgs
      
    - name: Setup NuGet authentication
      run: |
        # Remove the source if it already exists
        dotnet nuget remove source github || true
        # Add the source with authentication
        dotnet nuget add source --username teton-ridge --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/teton-ridge/index.json"
        
    - name: Publish to GitHub Packages
      run: dotnet nuget push nupkgs/*.nupkg --source github --api-key ${{ secrets.GITHUB_TOKEN }} 